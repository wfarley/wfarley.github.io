<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Will Farley]]></title>
  <link href="http://wfarley.github.io/atom.xml" rel="self"/>
  <link href="http://wfarley.github.io/"/>
  <updated>2013-06-02T02:29:12-05:00</updated>
  <id>http://wfarley.github.io/</id>
  <author>
    <name><![CDATA[Will Farley]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Project - Photo Filter]]></title>
    <link href="http://wfarley.github.io/blog/2013/05/18/project-photo-filter/"/>
    <updated>2013-05-18T01:00:00-05:00</updated>
    <id>http://wfarley.github.io/blog/2013/05/18/project-photo-filter</id>
    <content type="html"><![CDATA[<p>I wanted to tackle this project first for a few reasons.  It&rsquo;s a task that lends itself to automation, has a small scope, and was relatively simple, so I should be able to complete it quickly.</p>

<h2>The Project</h2>

<p>After we import new photos into Lightroom, they get edited, then all get exported as JPGs to a folder on the desktop.  After the export completes, we move the photos into a year/month directory structure on our home server.</p>

<p>It has a few different pieces to it which I&rsquo;ve not worked with before, but have been interested in learning.</p>

<h3>The Launch Agent</h3>

<p>I wanted to monitor the export folder, and have the script kicked off automatically, rather than manually running the script after the export completed.</p>

<p><code>launchd</code> is perfect, and this gives me good reason to get experience with it.</p>

<p>My final launchd script looks like this:</p>

<pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;
&lt;plist version="1.0"&gt;
&lt;dict&gt;
    &lt;key&gt;Label&lt;/key&gt;
    &lt;string&gt;org.willf.photo_filter&lt;/string&gt;
    &lt;key&gt;ProgramArguments&lt;/key&gt;
    &lt;array&gt;
        &lt;string&gt;ruby&lt;/string&gt;
        &lt;string&gt;/Users/will/Dropbox/Development/Scripts/file_photos.rb&lt;/string&gt;
          &lt;string&gt;/Users/will/Desktop/New Pics/&lt;/string&gt;
    &lt;/array&gt;
    &lt;key&gt;WatchPaths&lt;/key&gt;
     &lt;array&gt;
          &lt;string&gt;/Users/will/Desktop/New Pics&lt;/string&gt;
     &lt;/array&gt;
&lt;/dict&gt;
&lt;/plist&gt;
</code></pre>

<p>Initially, I tried to use the <code>QueueDirectories</code> key instead of WatchPaths. It is more
inline with what I need, however there was a problem with using it.  For <code>QueueDirectories</code>, the launch agent starts whenever the given directories on not empty, i.e. once files are added, and will not start again until after those directories
are empty.  The problem is that the directory I want to monitor can and will be occasionally visited in Finder, which places a hidden .DS_Store in the directory. I didn&rsquo;t want to deal with monitoring and constantly erasing that file, and risk the launch agent not starting because of that file.</p>

<p>So I went with WatchPaths, which starts the launch agent whenever the path changes. This has worked out fine.</p>

<h3>The Script</h3>

<p>When the ruby script gets kicked off by the launch agent, it first starts watching the directory.  Every three minutes, it checks the directory to see if the list of files in the directory has changed.</p>

<pre><code># Wait for export of all photos to the directory to be completed
def WaitForDirectory(dirName)
    prev_all_files = []
    all_files = Dir.entries(dirName)

    while (prev_all_files.sort != all_files.sort)
        sleep(WAIT_TIME)
        prev_all_files = all_files
        all_files = Dir.entries(dirName)
    end
end
</code></pre>

<p>The exports from Lightroom usually take quite a while, since we export a large group of images normally. If no new files have been added to the directory in the last three minutes, I assume the export has completed and get on with the script.</p>

<p>I&rsquo;m using the <code>exifr</code> (EXIF Reader) gem to read the EXIF data of the images.  It is easy to setup and use, and works quite well for my needs.</p>

<p>I pull each JPG file in the directory and read its EXIF data, pulling out the image&rsquo;s original year and month.</p>

<pre><code>year = exif_data.exif.date_time_original.year
month = exif_data.exif.date_time_original.strftime("%B")
</code></pre>

<p>The <code>%B</code> argument in <code>strftime</code> gives me the full month name (i.e. &ldquo;January&rdquo;).  I create (if necessary, with <code>FileUtils.mkdir_p</code>) a directory structure at the same level as the folder I&rsquo;m watching with that mirrors the same structure as the server folder layout.  I then move the image file to its new location.</p>

<p>Once I process and move each photo to its new location, I make sure the server volume is mounted.  If not, I run a shell script to mount it.</p>

<pre><code>#! /bin/bash
if [ ! -d "/Volumes/Photos" ]; then
   automator /Users/will/Dropbox/Development/Scripts/MountPhotosVolume.app
fi
</code></pre>

<p>Using Automator was another new learning experience for me.  There&rsquo;s other ways I could have mounted it, but I wanted to check out Autmator, and it works well.</p>

<p>(I also added another launch agent which periodically runs this script, to attempt to make sure this volume is always mounted.)</p>

<p>After it runs the shell script, it waits 10 seconds for the volume to mount, then uses <code>FileUtils.cp_r</code> to copy the files directly to the server with the same layout.</p>

<h3>Potential Add-Ons</h3>

<p>I would like to automate the task of verifying that all of were copied to the server correctly.  I also need to add another check to abort if the volume doesn&rsquo;t get mounted for some reason by the shell script.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Starting Out]]></title>
    <link href="http://wfarley.github.io/blog/2013/05/15/starting-out/"/>
    <updated>2013-05-15T11:25:00-05:00</updated>
    <id>http://wfarley.github.io/blog/2013/05/15/starting-out</id>
    <content type="html"><![CDATA[<p>I had a few goals &ndash; to start working on projects again, even if they were small, learning ruby, working more with git, and start a dev blog.  For the blog I was interested in using a Jekyll based blog for the experience, and since it&rsquo;s ruby based, give me more ruby projects to potentially work with.  I want to start out with a small scope for the blog, just dev stuff, but I&rsquo;ll just write and see where it goes.</p>

<p>For a first ruby project, I wanted to tackle a task I&rsquo;ve wanted to automate for years &ndash; sorting photos and moving them into their proper directory on our home server.</p>
]]></content>
  </entry>
  
</feed>
